/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CoreInterface extends ethers.utils.Interface {
  functions: {
    "addTokenToTrade(bytes32,uint256,uint256)": FunctionFragment;
    "changeUserReadiness(bytes32,bool)": FunctionFragment;
    "getTrade(bytes32)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "removeTokenFromTrade(bytes32,uint256)": FunctionFragment;
    "startTrade(bytes32,address,address,address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addTokenToTrade",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeUserReadiness",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "getTrade", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTokenFromTrade",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startTrade",
    values: [BytesLike, string, string, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addTokenToTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeUserReadiness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTokenFromTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTrade", data: BytesLike): Result;

  events: {
    "TokenAddedToTrade(bytes32,address,uint256,uint256)": EventFragment;
    "TokenRemovedFromTrade(bytes32,address,uint256,uint256)": EventFragment;
    "TradeExtended(bytes32,address,uint256)": EventFragment;
    "TradeFinalized(bytes32)": EventFragment;
    "TradeStarted(bytes32,address,address,address,address)": EventFragment;
    "UserTradeStateChange(bytes32,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TokenAddedToTrade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRemovedFromTrade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserTradeStateChange"): EventFragment;
}

export class Core extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CoreInterface;

  functions: {
    addTokenToTrade(
      _tradeId: BytesLike,
      _tokenId: BigNumberish,
      _cell: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeUserReadiness(
      _tradeId: BytesLike,
      _state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTrade(
      _tradeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, string, string, BigNumber, number]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeTokenFromTrade(
      _tradeId: BytesLike,
      _cell: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTrade(
      _tradeId: BytesLike,
      _starter: string,
      _receiver: string,
      _starterContractAddress: string,
      _receiverContractAddress: string,
      _amountOfCells: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addTokenToTrade(
    _tradeId: BytesLike,
    _tokenId: BigNumberish,
    _cell: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeUserReadiness(
    _tradeId: BytesLike,
    _state: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTrade(
    _tradeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string, string, string, BigNumber, number]>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeTokenFromTrade(
    _tradeId: BytesLike,
    _cell: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTrade(
    _tradeId: BytesLike,
    _starter: string,
    _receiver: string,
    _starterContractAddress: string,
    _receiverContractAddress: string,
    _amountOfCells: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addTokenToTrade(
      _tradeId: BytesLike,
      _tokenId: BigNumberish,
      _cell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeUserReadiness(
      _tradeId: BytesLike,
      _state: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getTrade(
      _tradeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, string, string, BigNumber, number]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    removeTokenFromTrade(
      _tradeId: BytesLike,
      _cell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startTrade(
      _tradeId: BytesLike,
      _starter: string,
      _receiver: string,
      _starterContractAddress: string,
      _receiverContractAddress: string,
      _amountOfCells: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    TokenAddedToTrade(
      _tradeId?: BytesLike | null,
      _owner?: null,
      _tokenId?: null,
      _cell?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        _tradeId: string;
        _owner: string;
        _tokenId: BigNumber;
        _cell: BigNumber;
      }
    >;

    TokenRemovedFromTrade(
      _tradeId?: BytesLike | null,
      _owner?: null,
      _tokenId?: null,
      _cell?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        _tradeId: string;
        _owner: string;
        _tokenId: BigNumber;
        _cell: BigNumber;
      }
    >;

    TradeExtended(
      _tradeId?: BytesLike | null,
      _owner?: null,
      _tokenId?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _tradeId: string; _owner: string; _tokenId: BigNumber }
    >;

    TradeFinalized(
      _tradeId?: null
    ): TypedEventFilter<[string], { _tradeId: string }>;

    TradeStarted(
      _tradeId?: BytesLike | null,
      _starter?: null,
      _receiver?: null,
      _starterContract?: null,
      _receiverContract?: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      {
        _tradeId: string;
        _starter: string;
        _receiver: string;
        _starterContract: string;
        _receiverContract: string;
      }
    >;

    UserTradeStateChange(
      _tradeId?: BytesLike | null,
      _user?: null,
      _isReady?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { _tradeId: string; _user: string; _isReady: boolean }
    >;
  };

  estimateGas: {
    addTokenToTrade(
      _tradeId: BytesLike,
      _tokenId: BigNumberish,
      _cell: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeUserReadiness(
      _tradeId: BytesLike,
      _state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTrade(
      _tradeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeTokenFromTrade(
      _tradeId: BytesLike,
      _cell: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTrade(
      _tradeId: BytesLike,
      _starter: string,
      _receiver: string,
      _starterContractAddress: string,
      _receiverContractAddress: string,
      _amountOfCells: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTokenToTrade(
      _tradeId: BytesLike,
      _tokenId: BigNumberish,
      _cell: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeUserReadiness(
      _tradeId: BytesLike,
      _state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTrade(
      _tradeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeTokenFromTrade(
      _tradeId: BytesLike,
      _cell: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTrade(
      _tradeId: BytesLike,
      _starter: string,
      _receiver: string,
      _starterContractAddress: string,
      _receiverContractAddress: string,
      _amountOfCells: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
